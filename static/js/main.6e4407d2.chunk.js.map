{"version":3,"sources":["Component/Airlines.js","Component/Time.js","Component/RowFlight.js","Component/TableFlights.js","Component/Board.js","App.js","serviceWorker.js","index.js"],"names":["Airlines","props","react_default","a","createElement","react","list","map","item","airline","en","name","codeShare","Time","date","Date","time","hours","getHours","minutes","getMinutes","concat","RowFlight","className","flightData","term","display","gateNo","Component_Time","timeDepExpectCalc","timeToStand","Component_Airlines","codeShareData","status","TableFlights","listOfFlights","sort","b","Component_RowFlight","key","ID","Board","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","table","dateForTable","yesterdayToDisplay","todayToDisplay","tomorrowToDisplay","changeDisplay","bind","assertThisInitialized","filterFlights","getDate","prevProps","prevState","_this2","loadApi","then","data","setState","departure","_this3","num","arguments","length","undefined","currentDate","currentDay","currentMonth","getMonth","currentYear","getFullYear","url","fetch","resolve","json","body","valueButton","_this4","target","value","_this5","Fragment","onClick","Component_TableFlights","filter","Component","App","src_Component_Board","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gTAgBqBA,MAdrB,SAAkBC,GAChB,OACEC,EAAAC,EAAAC,cAACC,EAAA,SAAD,KACEH,EAAAC,EAAAC,cAAA,UACGH,EAAMK,KAAKC,IAAI,SAAAC,GAAI,OAAIN,EAAAC,EAAAC,cAAA,YAAOI,EAAKC,QAAQC,GAAGC,KAAKT,EAAAC,EAAAC,cAAA,eAEtDF,EAAAC,EAAAC,cAAA,UACGH,EAAMK,KAAKC,IAAI,SAAAC,GAAI,OAAIN,EAAAC,EAAAC,cAAA,YAAOI,EAAKI,UAAUV,EAAAC,EAAAC,cAAA,iBCEvCS,MATf,SAAcZ,GACZ,IAAMa,EAAQ,IAAIC,KAAKd,EAAMe,MACvBC,EAAQH,EAAKI,WACbC,EAAUL,EAAKM,aACrB,OACElB,EAAAC,EAAAC,cAAA,aAAAiB,OAAQJ,EAAR,KAAAI,OAAiBF,EAAU,GAAK,IAAKA,EAAUA,KCgBpCG,MAnBf,SAAmBrB,GACjB,OACIC,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,MAAImB,UAAU,YACZrB,EAAAC,EAAAC,cAAA,KAAGmB,UAAqC,MAA1BtB,EAAMuB,WAAWC,KAAe,QAAU,QACrDxB,EAAMuB,WAAWC,OAGH,cAAlBxB,EAAMyB,QAA0BxB,EAAAC,EAAAC,cAAA,UAAKH,EAAMuB,WAAWG,QAAe,KACtEzB,EAAAC,EAAAC,cAACwB,EAAD,CAAMZ,KAAMf,EAAMuB,WAAWK,kBAC3B5B,EAAMuB,WAAWK,kBAAoB5B,EAAMuB,WAAWM,cACxD5B,EAAAC,EAAAC,cAAA,UAAKH,EAAMuB,WAAW,uBACpBvB,EAAMuB,WAAW,uBAAyBvB,EAAMuB,WAAW,0BAC7DtB,EAAAC,EAAAC,cAAC2B,EAAD,CAAUzB,KAAML,EAAMuB,WAAWQ,gBACjC9B,EAAAC,EAAAC,cAAA,UAAKH,EAAMuB,WAAWS,gBCQfC,MAtBf,SAAsBjC,GACpB,OACEC,EAAAC,EAAAC,cAAA,SAAOmB,UAAU,YACfrB,EAAAC,EAAAC,cAAA,aACAF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,sBACmB,cAAlBH,EAAMyB,QAA0BxB,EAAAC,EAAAC,cAAA,kBAAgB,KACjDF,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAA,sBAGFF,EAAAC,EAAAC,cAAA,aACCH,EAAMkC,cAAcC,KAAK,SAACjC,EAAGkC,GAAJ,OAAWlC,EAAE0B,mBAAqB1B,EAAE2B,cAAgBO,EAAER,mBAAqBQ,EAAEP,eACpGvB,IAAI,SAAAC,GAAI,OAAIN,EAAAC,EAAAC,cAACkC,EAAD,CAAWC,IAAK/B,EAAKgC,GAAIhB,WAAYhB,EAAMkB,QAASzB,EAAMyB,eCuFhEe,qBApGb,SAAAA,EAAYxC,GAAO,IAAAyC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACjBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAM5C,KACDgD,MAAQ,CACXvB,QAAS,YACTF,WAAY,GACZ0B,MAAO,GACPpC,KAAM,KACNqC,aAAc,GACdC,mBAAoB,GACpBC,eAAgB,GAChBC,kBAAmB,IAErBZ,EAAKa,cAAgBb,EAAKa,cAAcC,KAAnBb,OAAAc,EAAA,EAAAd,CAAAD,IACrBA,EAAKgB,cAAgBhB,EAAKgB,cAAcF,KAAnBb,OAAAc,EAAA,EAAAd,CAAAD,IAbJA,mFAiBjBG,KAAKc,qDAGYC,EAAWC,GAAW,IAAAC,EAAAjB,KACnCA,KAAKI,MAAMnC,OAAS+C,EAAU/C,MAChC+B,KAAKkB,QAAL,oCAAA1C,OAAiDwB,KAAKI,MAAMnC,OACzDkD,KAAK,SAAAC,GACJH,EAAKI,SAAS,SAAAjB,GAAK,MAAK,CACtBzB,WAAYyC,EACZf,MAAOe,EAAKE,iDAML,IAAAC,EAAAvB,KAATwB,EAASC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAH,EACNG,EAAc,IAAI1D,KAClB2D,EAAaD,EAAYd,UAAYU,EACrCM,EAAeF,EAAYG,WAAa,EACxCC,EAAcJ,EAAYK,cAChCjC,KAAKqB,SAAS,CACZpD,KAAI,GAAAO,OAAKqD,EAAL,KAAArD,OAAmBsD,EAAnB,KAAAtD,OAAmCwD,GACvC1B,aAAc,CAAC0B,EAAaF,EAAcD,IACzC,kBAAMN,EAAKnB,wCAGR8B,GACN,OAAOC,MAAMD,GACVf,KAAK,SAAAiB,GAAO,OAAIA,EAAQC,SACxBlB,KAAK,SAAAC,GAAI,OAAIA,EAAKkB,6CAITC,GAAa,IAAAC,EAAAxC,KACzBA,KAAKqB,SAAS,CACZxC,QAAS0D,EAAYE,OAAOC,MAC5BrC,MAAOL,KAAKI,MAAMzB,WAAW4D,EAAYE,OAAOC,QAC/C,kBAAMF,EAAKpC,MAAMC,8CAIRpC,GACZ,OAAO,IAAIC,KAAKD,GAAM6C,2CAGf,IAAA6B,EAAA3C,KAEP,OACE3C,EAAAC,EAAAC,cAAAF,EAAAC,EAAAsF,SAAA,KACEvF,EAAAC,EAAAC,cAAA,OAAKmB,UAAU,WACbrB,EAAAC,EAAAC,cAAA,UAAQsF,QAAS7C,KAAKU,cAAegC,MAAM,YACnChE,UAAkC,cAAvBsB,KAAKI,MAAMvB,QACpB,aAAe,gBAFzB,cAGAxB,EAAAC,EAAAC,cAAA,UAAQsF,QAAS7C,KAAKU,cAAegC,MAAM,UACjChE,UAAkC,YAAvBsB,KAAKI,MAAMvB,QACpB,aAAe,gBAF3B,aAIFxB,EAAAC,EAAAC,cAAA,OAAKmB,UAAU,aAEfrB,EAAAC,EAAAC,cAAA,OAAKmB,UAAU,gBACbrB,EAAAC,EAAAC,cAAA,UAAQsF,QAAS7C,KAAKc,QAAQH,KAAKX,MAAO,IAA1C,aAGA3C,EAAAC,EAAAC,cAAA,UAAQsF,QAAS7C,KAAKc,QAAQH,KAAKX,KAAM,GAAItB,UAAU,UAAvD,SAGArB,EAAAC,EAAAC,cAAA,UAAQsF,QAAS7C,KAAKc,QAAQH,KAAKX,KAAM,IAAzC,aAIF3C,EAAAC,EAAAC,cAACuF,EAAD,CAAcjE,QAASmB,KAAKI,MAAMvB,QAASS,cAAeU,KAAKI,MAAMC,MAAM0C,OAAO,SAAApF,GAAI,OACpFA,EAAKqB,kBACH2D,EAAK9B,cAAclD,EAAKqB,qBAAuB2D,EAAK9B,cAAc8B,EAAKvC,MAAME,cAE7EqC,EAAK9B,cAAclD,EAAKsB,eAAiB0D,EAAK9B,cAAc8B,EAAKvC,MAAME,0BA9F/D0C,cCMLC,MANf,WACE,OACE5F,EAAAC,EAAAC,cAAC2F,EAAD,OCMgBC,QACW,cAA7BC,OAAOC,SAASC,UAEkB,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAC1B,2DCZNC,IAASC,OAAOpG,EAAAC,EAAAC,cAACmG,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5C,KAAK,SAAC6C,GAClCA,EAAaC","file":"static/js/main.6e4407d2.chunk.js","sourcesContent":["import React, {Fragment} from 'react';\n\nfunction Airlines(props) {\n  return (\n    <Fragment>\n      <td>\n        {props.list.map(item => <span>{item.airline.en.name}<br/></span>)}\n      </td>\n      <td>\n        {props.list.map(item => <span>{item.codeShare}<br/></span>)}\n      </td>\n    </Fragment>\n\n      );\n      }\n\n      export default Airlines;\n","import React from 'react';\n\nfunction Time(props) {\n  const date =  new Date(props.time)\n  const hours = date.getHours()\n  const minutes = date.getMinutes()\n  return (\n    <td>{`${hours}:${minutes < 10 ? '0'+ minutes : minutes}`}</td>\n  );\n}\n\nexport default Time;\n","import React from 'react';\nimport Airlines from './Airlines';\nimport Time from './Time';\n\nfunction RowFlight(props) {\n  return (\n      <tr>\n        <td className='terminal'>\n          <p className={props.flightData.term === 'A' ? 'green' : 'blue'}>\n            {props.flightData.term}\n          </p>\n        </td>\n        {props.display === 'departure' ? <td>{props.flightData.gateNo}</td> : null}\n        <Time time={props.flightData.timeDepExpectCalc ?\n          props.flightData.timeDepExpectCalc : props.flightData.timeToStand}/>\n        <td>{props.flightData['airportToID.city_en'] ?\n          props.flightData['airportToID.city_en'] : props.flightData['airportFromID.city_en'] }</td>\n        <Airlines list={props.flightData.codeShareData}/>\n        <td>{props.flightData.status}</td>\n      </tr>\n  );\n}\n\nexport default RowFlight;\n","import React from 'react';\nimport RowFlight from './RowFlight';\nimport './TableFlights.css'\n\nfunction TableFlights(props) {\n  return (\n    <table className='schedule'>\n      <thead>\n      <tr>\n        <th>Terminal</th>\n        {props.display === 'departure' ? <th>Gate</th> : null}\n        <th>Local time</th>\n        <th>Destination</th>\n        <th>Airline</th>\n        <th>Flight</th>\n        <th>Status</th>\n      </tr>\n      </thead>\n      <tbody>\n      {props.listOfFlights.sort((a, b) => (a.timeDepExpectCalc || a.timeToStand) < (b.timeDepExpectCalc || b.timeToStand))\n        .map(item => <RowFlight key={item.ID} flightData={item} display={props.display}/>)}\n      </tbody>\n    </table>\n  );\n}\n\nexport default TableFlights;\n\n","import React, { Component } from 'react';\nimport TableFlights from './TableFlights';\nimport './Board.css'\n\nclass Board extends Component {\n  departure;\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      display: 'departure',\n      flightData: [],\n      table: [],\n      date: null,\n      dateForTable: [],\n      yesterdayToDisplay: '',\n      todayToDisplay: '',\n      tomorrowToDisplay: '',\n    };\n    this.changeDisplay = this.changeDisplay.bind(this);\n    this.filterFlights = this.filterFlights.bind(this);\n  }\n\n  componentDidMount() {\n    this.getDate();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.date !== prevState.date) {\n      this.loadApi(`https://api.iev.aero/api/flights/${this.state.date}`)\n        .then(data => {\n          this.setState(state => ({\n            flightData: data,\n            table: data.departure,\n          }));\n        })\n    }\n  }\n\n  getDate(num = 0) {\n    const currentDate = new Date();\n    const currentDay = currentDate.getDate() + num;\n    const currentMonth = currentDate.getMonth() + 1;\n    const currentYear = currentDate.getFullYear();\n    this.setState({\n      date: `${currentDay}-${currentMonth}-${currentYear}`,\n      dateForTable: [currentYear, currentMonth, currentDay],\n    }, () => this.state);\n  }\n\n  loadApi(url) {\n    return fetch(url)\n      .then(resolve => resolve.json())\n      .then(data => data.body)\n\n  }\n\n  changeDisplay(valueButton) {\n    this.setState({\n      display: valueButton.target.value,\n      table: this.state.flightData[valueButton.target.value]\n    }, () => this.state.table);\n\n  }\n\n  filterFlights(date) {\n    return new Date(date).getDate();\n  }\n\n  render() {\n\n    return (\n      <>\n        <div className='display'>\n          <button onClick={this.changeDisplay} value='departure'\n                  className={this.state.display === 'departure' ?\n                    'active dep' : 'inactive dep'}>Departures</button>\n          <button onClick={this.changeDisplay} value='arrival'\n                    className={this.state.display === 'arrival' ?\n                      'active arr' : 'inactive arr'}>Arrivals</button>\n        </div>\n        <div className='calendar'>\n        </div>\n        <div className='dayToDisplay'>\n          <button onClick={this.getDate.bind(this, -1)}>\n            Yesterday\n          </button>\n          <button onClick={this.getDate.bind(this, 0)} className='active'>\n            Today\n          </button>\n          <button onClick={this.getDate.bind(this, 1)}>\n            Tomorrow\n          </button>\n        </div>\n        <TableFlights display={this.state.display} listOfFlights={this.state.table.filter(item =>\n          item.timeDepExpectCalc ? (\n            this.filterFlights(item.timeDepExpectCalc) === this.filterFlights(this.state.dateForTable)\n          ) : (\n            this.filterFlights(item.timeToStand) === this.filterFlights(this.state.dateForTable)\n          )\n        )}\n        />\n      </>\n    );\n  }\n}\n\nexport default Board;\n","import React from 'react';\nimport './App.css';\nimport Board from './Component/Board';\n\nfunction App() {\n  return (\n    <Board />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost'\r\n    // [::1] is the IPv6 localhost address.\r\n    || window.location.hostname === '[::1]'\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    || window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets;\r\n      // see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost.\r\n        // Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service '\r\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all '\r\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404\r\n        || (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then((registration) => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}